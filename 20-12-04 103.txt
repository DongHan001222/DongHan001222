1.아래의 접근제한자에 대하여 설명하시오.
-private 접근 관련 modifier 중에서 가장 권한 범위가 좋은 modifier로 자기 자신 클래스 내에서만 이용할 수 있는 멤버를 선언할 때 사용한다.

-protected동일 패키지와 동일 패키지에 포함되지는 않지만 하위 클래스 관계에 있는 클래스도 접근할 수 있다.

-default접근 관련 modifier를 지정하지 않은 경우이다. 이는 동일 패키지에 속하는 클래스만 접근할 수 있는 멤버이다.

-public 모든 클래스에 의해 접근할 수 있다.  즉, 접근 제약이 없다.

2.지역변수에 접근제한자를 붙이지 않는 이유는?
  지역변수는 지역변수만에 활동반경이 있기때문이다

3.캡슐화에 대하여 설명하시오.
캡슐화는 일반적으로 변수와 클래스를 하나로 묶는 작업이다. 캡슐화의 중요 목적은 중요한데이터를 보존,보호하기 위해 사용하는것이다

4.랜덤 숫자 맞추기 게임을 짜시오.
import java.util.Random;
import java.util.Scanner;

public class GuessNumberGame {
	
	public static void main(String[] args) {
		int low, high; // 카드에 적힌 수의 범위
		int card; // 카드에 적힌 번호 값(숨기는 값, 정답)
		Random r = new Random(); // 난수 발생기 생성
		Scanner scanner = new Scanner(System.in); // 키보드 입력기 생성
		
		// "n"가 입력될 때까지 반복하여 게임을 진행한다.
		while(true) {
			int i=0; // 사용자의 시행 횟수
			low = 0; // 카드 값의 최소 범위
			high = 99; // 카드 값의 최대 범위			
			card = r.nextInt(100);// 0과  99 사이의 정수 난수(숨기는 값) 생성
			System.out.println("수를 결정하였습니다. 맞추어 보세요");
			
			while(true) {
				System.out.println(low +"-" + high); // 값의 범위 출력
				System.out.print(i+1+">>"); // 시행 횟수 출력
				int n=0;

				try {
					n= scanner.nextInt(); // 수를 입력받는다.
				} 
				catch(Exception e) { // 키 입력을 정수로 변환하지 못하는 예외 처리 
					System.out.println("정수만 입력하셔야 합니다!!");
					scanner.nextLine(); // 나머지 모든 키를 읽어서 버린다.
					continue; // 다시 시도한다.
				}
				
				if(n>high || n<low) // high와 low의 범위를 벗어난 경우
					System.out.println("범위를 벗어났어요");
				else {// 정상적인 범위의 수가 입력된 경우
					if(n==card) {
						System.out.println("맞았습니다.");
						break; // while 문 종료
					}
					else if(n>card){ // 입력된 값이 정답보다 높은 범위의 수인 경우 
						System.out.println("더 낮게");
						high = n;					
					}
					else { // 입력된 값이 정답보다 낮은 범위의 수인 경우
						System.out.println("더 높게");
						low = n;									
					}
				}
				i++; // 시행 횟수 증가
			} // end of while
			
			System.out.print("다시하시겠습니까(y/n)>>");
			if(scanner.next().equals("n"))
				break; // while 문 종료
		}// end of while

	} // end of main()
}


5.static 변수의 다른 용어 3가지를 말해 보시오.
 클래스변수 공유변수 스태틱변수

6.자바의 메모리 영역을 3가지로 나누고, 해당 영역에 들어가는 정보를 말하여 보시오.
Method Area
실행 중 어떠한 class가 사용되면, JVM은 해당 class의 class file(*.class)을 읽어 분석한 후 class 관련 정보를 이 영역에 저장한다. 이때 class 변수(variable)도 함께 저장된다.
 
모든 method(class method, instance method)는 static area에 로드 된다. 하지만 class method인 경우는 instance 생성 없이 class 이름으로 바로 호출 가능하고, instance method는 객체를 생성해야 한다. Instance method는 instance variable을 사용하기 때문이다.

Call stack
Method의 작업에 필요한 공간이다. Method가 호출되면 Call Stack에 호출된 method를 위한 메모리가 할당되며, 이 메모리는 method가 작업을 수행하는 동안 local variable과 중간 연산 결과 등을 저장하게 된다. 그리고 method가 작업을 마치면 할당되었던 공간은 반환되어 비워진다.

Heap
Instance가 생성되는 공간이다. 실행 중 생성되는 instance는 이 영역에 저장된다. 즉, instance 변수(variable)가 저장되는 것이다

7.static 변수의 접근 방법은?
 클래스내부에서 직접접근
 인스턴스 생성후 접근
 클래스의 이름으로 접근

.아래의 프로그램을 작성 하시오.


다음 멤버를 가지고 직사각형을 표현하는 Rectangle 클래스를 작성하라.

- int 타입의 x, y, width, height 필드: 사각형을 구성하는 점과 크기 정보
- x, y, width, height 값을 매개변수로 받아 필드를 초기화하는 생성자
- int square() : 사각형 넓이 리턴
- void show() : 사각형의 좌표와 넓이를 화면에 출력
- boolean contatins(Rectangle r) : 매개변수로 받은 r이 현 사각형 안에 있으면 true 리턴
- main() 메소드의 코드와 실행 결과는 다음과 같다
public static void main(String[] args) {
   Rectangle r = new Rectangle(2, 2, 8, 7);
   Rectangle s = new Rectangle(5, 5, 6, 6);
   Rectangle t = new Rectangle(1, 1, 10, 10);
   
   r.show();
   System.out.println("s의 면적은 "+s.square());
   if(t.contains(r)) System.out.println("t는 r을 포함합니다.");
   if(t.contains(s)) System.out.println("t는 s를 포함합니다.");
}
(2,2)에서 크기가 8x7인 사각형
s의 면적은 36
t는 r을 포함합니다.

public class Rectangle {
	private int x,y,width,height;
	
	public Rectangle (){}
		
	
	public Rectangle (int x,int y,int width,int height) {
		this.x = x;
		this.y = y;
		this.width = width;
		this.height = height;
	}
	public int square() {
		return(this.width * this.height);
	}
	public void show() {
		System.out.println("( " + this.x + " , " + this.y + " )에서 크기가 " + this.width + " x" + this.height + "인 사각형" );
	}
	boolean contains(Rectangle r) {
		if( ((r.x + r.width) < (this.x + this.width)) && ((r.y + r.height) < (this.y + this.height)) && (this.x < r.x) && (this.y < r.y));
	
		return true;		
	}
}




public class Rmain {
	
	public static void main(String args[])

	{

	Rectangle r = new Rectangle(2, 2, 8 ,7 ); // r은 x = 2, y = 2

	Rectangle s = new Rectangle(5, 5, 6 ,6 );// s는 x= 5, y = 5

	Rectangle t = new Rectangle(1, 1, 10 ,10 ); 

	r.show();

	System.out.println("s면적은 " + s.square());

	if(t.contains(r)) System.out.println("t는 r을 포함합니다.");

	if(t.contains(s)) System.out.println("t는 s을 포함합니다.");


	}
}
