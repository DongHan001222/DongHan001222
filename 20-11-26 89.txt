1.결합방향과 우선순위에 대하여 설명하시오.
-----------------------------------------------------------------------
연산자 결합방향:
 한 수식에서 동일한 우선순위를 가진 연산자들이 연속적으로 나타나 있으면 연산자의 결합 방향을 고려하여야 한다. 대부분의 연산자들은 왼쪽에서 오른쪽으로 결합을한다. 하지만 반대로 오른쪽에서 왼쪽으로 결합하는 연산자가 있다.
 1.단항연상자,형변환연상자,sizeof등은 오른쪽에서 왼쪽으로 결합
 2.조건연산자는 오른쪽에서 왼쪽으로 결합한다
 3.대입 연산잔느 오른쪽에서 왼쪽으로 결합한다
-----------------------------------------------------------------------
연산자의 우선순위:
한 수식에 여러 개의 연산자를 사용하는 경우에 연산자들의 우선순위를 고려하지 않을 수 없다.
 1.괄호,배열,구조체,공용체멤버를 나타내는 지시자().[] 등등 은 운선수위가 가장 높다
 2.한개의 피연산자를 갖는 단항연상자(!,++,--등..) 이 그 다음으로 우선순위가 높다.
 3.그 다음은 산술연산자(+.-.*,/,%)이다.
 4.쉬프트양탄자와 비교양탄자는 비트연산자보다 연산순위가 높다
 5.맨 하위에 대입연산자와 콤마연산자가있다
-----------------------------------------------------------------------
2.1 초과 100 미만인가? 를 코딩을 하게 되면?
 result = ( 1 < num1) && (num1 < 100)l
 system.out.println("1초과 100 미만인가? " + result)
-----------------------------------------------------------------------
3.2의 배수 또는 3의 배수? 를 코딩을 하게 되면?
 result = ((num2 % 2) == 0) || ((num2 % 3) == 0);
 System.out.println("2 또는 3의 배수인가? " + result);
-----------------------------------------------------------------------
4. && 와  || 설명하시오.
 && 는 and이고 둘다 true 여야 값이 나오고
  T && T
 || 는 한개라도 false가 나오면 flase값이 나온다.
-----------------------------------------------------------------------
5. 아래의 프린트 결과를 예측해 보고, 코딩후 결과를 확인하시오
class SCE {
    public static void main(String[] args) {
        int num1 = 0; 
        int num2 = 0;
        boolean result;
        
        result = ((num1 += 10) < 0) && ((num2 += 10) > 0);
        System.out.println("result = " + result);
        System.out.println("num1 = " + num1);
        System.out.println("num2 = " + num2 + '\n');
		
        result = ((num1 += 10) > 0) || ((num2 += 10) > 0);
        System.out.println("result = " + result);
        System.out.println("num1 = " + num1);
        System.out.println("num2 = " + num2);
    }
}
  result = false
  num1 = 10
  num2 = 0

  result = true
  num1 = 20
  num2 = 0
-----------------------------------------------------------------------
6.아래가 에러가 나는 이유를 설명하고, 수정하시오
short num1
short num = -num 
 변수 이름이 같음.세미콜론이 없음. 초기화를 하지않음,
short num = 1;
num = (short)-num;
-----------------------------------------------------------------------
7.전위증가 연산자와 후위증가 연산자의 차이는?
 전위 증감 연산자는 변수 자체의 값을 1 증가/감소해서 반환하지만 후위   증 감 연산자는 다른 변수에 현재 변수 값을 저장하고 변수 값을 1 증가/감  소 하고 이전에 저장된 값을 반환한다.
-----------------------------------------------------------------------
8.아래의 비트연산자 4가지를 설명하시오.
-&,^,|,~
 & 비트단위로 and 연산을 한다.
 ^ 비트 단위로 XOR 연산을 한다.
 | 비트 단위로 or 연산을 한다.
 ~ 피연산자의 모든 비트를 반전 시켜서 얻은 결과를 반환한다.
-----------------------------------------------------------------------
9.아래의 쉬프트 연산자에 대하여 설명하시오.
<< , >>
 << 는 피연산자의 비트 열을 왼쪽으로 이동
 이동에 따른 빈공간은 0으로 채움
 >> 피연산자의 비트 열을 오른쪽으로 이동
 이동에 따른 빈 공간은 음수의 경우 1, 양수의 경우 0 으로 채움
-----------------------------------------------------------------------
10.전위연산자와 후위연산자에 대하여 설명하시오.
 전위증가연산자 ++i: 변수의 값을 변경 시키고 할당.
  후위증가연산자 --i: 변수를 먼저 할당하고 값을 변경.
-----------------------------------------------------------------------
11.아래의 출력값을 예측하시오.
class AssignSteResult {
    public static void main(String[] args) {
        int num1 = 10, num2 = 20, num3 = 30;
        num1 = num2 = num3;

        /*
          = 연산자는 결합 방향이 오른쪽에서 왼쪽으로 진행된다. 
          따라서 위의 문장은 다음과 같다. 
          num1 = (num2 = num3);        
        */
        
        System.out.println(num1);	
        System.out.println(num2);
        System.out.println(num3);
    }
}
  30
  30
  30
-----------------------------------------------------------------------
12.아래의 출력값을 예측하시오.
class SCE {
    public static void main(String[] args) {
        int num1 = 0; 
        int num2 = 0;
        boolean result;

        num1 += 10;
        num2 += 10;        
        result = (num1 < 0) && (num2 > 0);

        System.out.println("result = " + result);
        System.out.println("num1 = " + num1);
        System.out.println("num2 = " + num2 + '\n');
		
        num1 += 10;
        num2 += 10;        
        result = (num1 > 0) || (num2 > 0);

        System.out.println("result = " + result);
        System.out.println("num1 = " + num1);
        System.out.println("num2 = " + num2);
    }
}
  result = false
  num1 = 10
  num2 = 10

  result = true
  num1 = 20
  num2 = 20
-----------------------------------------------------------------------
13.아래의 출력값을 예측하시오.
class AddNum {
    public static void main(String[] args) {
        int result = 3 + 6;
        System.out.println("3 + 6 = " + result);
        
        result += 9;
        System.out.println("3 + 6 + 9 = " + result);
        
        result += 12;
        System.out.println("3 + 6 + 9 + 12 = " + result);
    }
}
   3 + 6 = 9
   3 + 6 + 9 = 18
   3 + 6 + 9 + 12 = 30
