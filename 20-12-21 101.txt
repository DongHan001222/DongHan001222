1.제네릭 클래스의 타입 인자 제한하는 방법과 효과는?

2.아래와 같이 출력값이 나오도록 프로그래밍 하시오.

class DDBoxDemo {
    public static void main(String[] args) {
        DBox<String, Integer> box1 = new DBox<>();
        box1.set("Apple", 25);

        DBox<String, Integer> box2 = new DBox<>();
        box2.set("Orange", 33);
        
        DDBox<DBox<String, Integer>, DBox<String, Integer>> ddbox = new DDBox<>();
        ddbox.set(box1, box2);

        System.out.println(ddbox);
    }
}

==================
Apple & 25
Orange & 33

class dBox<L, R>{
    private L left;
    private R right;
 
    public void set(L o, R r){
        left = o;
        right = r;
    }
 
    public String toString(){
        return left + " & " + right;
    }
}

3.아래와 같이 출력값이 나오도록 프로그래밍 하시오.

    public static void main(String[] args) {
        Box<Integer> box1 = new Box<>();
        box1.set(99);

        Box<Integer> box2 = new Box<>();
        box2.set(55);

        System.out.println(box1.get() + " & " + box2.get());
        swapBox(box1, box2);
        System.out.println(box1.get() + " & " + box2.get());
    }
==========
99 & 55
55 & 99

package Jokbo;

public class Box<T> {
	private T ob;

	public T get() {
		return ob;
	}

	public void set(T ob) {
		this.ob = ob;
	}

	public static <T extends Number> void swapBox(Box<T> box1, Box<T> box2) {
		T tmp = box1.get();
		box1.set(box2.get());
		box2.set(tmp);
	}
}

4.지네릭 메소드에 대하여 설명하시오.
자료형을 매개변수로 가지는 메소드
하나의 메소드 정의로 여러 유형의 데이터를 처리할떄 유용하게 사용된다
메소드 정의에사 반환형횐편, 각 괄호 <>안에 타입 매개변수를 가진다.
인스턴스 메소드와 정적(static) 메소드 모두 제네릭 메소드로 정의할수있다.
제네릭메소드를 호출할때 타입 명시하지 않아도 인자에 의해 추런가능한 경우 생략 가능하다.

5.와일드 카드와 상한 제한, 하한 제한에 대하여 설명하시오.
와일드카드: 제네릭 타입을 매개값이나 리턴 타입으로 사용할떄 구체적이 타입 대신에 사용하는것으로 코드에서는 ? 로 표현된다.
상한제한: T와 그 자손들을 구현한 객체들만 매개변수로 가능
하향제한: T와 그 조상들을 구현한 객체들만 매개변수로 가능

6.아래가 에러가 나는 이유를 설명하시오.
public static void inBox(Box<? super Toy> box, Toy n) {
   box.set(n);   // 넣는 것! OK!
   Toy myToy = box.get();   // 꺼내는 것! Error!
}


7.아래와 같이 메소드 오버로딩이 되지 않는 이유는?
// 다음 두 메소드는 오버로딩 인정 안됨.
   public static void outBox(Box<? extends Toy> box) {...}
   public static void outBox(Box<? extends Robot> box) {...}
위 문장을 해석하면 자손=부모가 되기떄문에 폴리몰피즘이 형성되지않는다

8.아래의 결과가 나오도록 프로그래밍을 완성하시오.
 public static void main(String[] args) {
        Box<Integer> box1 = new Box<>();
        box1.set(24);

        Box<String> box2 = new Box<>();
        box2.set("Poly");

        if(compBox(box1, 25))
            System.out.println("상자 안에 25 저장");

        if(compBox(box2, "Moly"))
            System.out.println("상자 안에 Moly 저장");
        
        System.out.println(box1.get());
        System.out.println(box2.get());
    }

=======
24
Poly

9.콜렉션 프레임워크란?
다수의 데이터를 쉽고 효과적으로 처리할수 있는 표준화된 방법을 제공하는 클래스의 집합