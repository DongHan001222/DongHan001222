1.Maker 인터페이스에 대하여 설명하시오.
클래스에 특정 표시를 해 두기 위해 목정으로 정의된 인터페이스를 마커 인터페이스라한다
마커 인터페이스는 구현해야할 메소드가 없는 경우가 흔하다

2.추상클래스에 대하여 설명하시오.
하나이상의 추상 메소드를 지니는 클래스를 가리켜 추상클래스라 한다

3.추상클래스와 인터페이스의 차이는?
추상클래스를 대상으로 인스턴스 생성이 불가능하다 물론 참조변수선언은 가능
인터페이스는 구현객체의 같은동작을 보장하기위해 사용

4.에러와 예외의 차이는?
오류(Error)는 시스템에 비정상적인 상황이 생겼을 때 발생한다. 이는 시스템 레벨에서 발생하기 때문에 심각한 수준의 오류이다. 따라서 개발자가 미리 예측하여 처리할 수 없기 때문에, 애플리케이션에서 오류에 대한 처리를 신경 쓰지 않아도 된다.

예외(Exception)는 개발자가 구현한 로직에서 발생한다. 즉, 예외는 발생할 상황을 미리 예측하여 처리할 수 있다. 즉, 예외는 개발자가 처리할 수 있기 때문에 예외를 구분하고 그에 따른 처리 방법을 명확히 알고 적용하는 것이 중요하다.

5.unchecked 와 cheked 예외의 차이는?
checkde :
-반드시 예외 처리를 해야한다.(try ~ catch를 통해)
-컴파일 단계에서 확인 가능하다.
-예외 발생시 트랜잭션 roll back 하지 않는다.
-RuntimeException을 제외한 Exception의 하위클래스
unchecked:
-명시적 예외 처리를 강제하지않는다.
-실행단계에서 확인가능하다
-예외발생시 트랜잭션 roll back 한다
-RuntimeException의 하위클래스

6.예외처리 UML를 그리시오.

7.사칙연산 계산기를 아래의 조건으로 짜시오.
-interface 를 활용할것
-예외처리 메커니즘을 적용할것.

8.다음 Stack 인터페이스를 상속받아 실수를 저장하는 StringStack 클래스를 구현하라.(구현할수 있도록 할것)

interface Stack {
   int length(); // 현재 스택에 저장된 개수 리턴
   int capacity(); // 스택의 전체 저장 가능한 개수 리턴
   String pop(); // 스택의 톱(top)에 실수 저장
   boolean push(String val); // 스택의 톱(top)에 저장된 실수 리턴
}
그리고 다음 실행 사례와 같이 작동하도록 StackApp 클래스에 main() 메소드를 작성하라.

총 스택 저장 공간의 크기 입력 >> 3
문자열 입력 >> hello
문자열 입력 >> sunny=
문자열 입력 >> smile
문자열 입력 >> happy
스택이 꽉 차서 푸시 불가!
문자열 입력 >> 그만
스택에 저장된 모든 문자열 팝 : smile sunny hello 

9.
철수 학생은 다음 3개의 필드와 메소드를 가진 4개의 클래스 Add, Sub, Mul, Div를 작성하려고 한다

- int 타입의 a, b 필드: 2개의 피연산자
- void setValue(int a, int b): 피연산자 값을 객체 내에 저장한다.
- int calculate(): 클래스의 목적에 맞는 연산을 실행하고 결과를 리턴한다.
곰곰 생각해보니, Add, Sub, Mul, Div 클래스에 공통된 필드와 메소드가 존재하므로 새로운 추상 클래스 Calc를 작성하고 Calc를 상속받아 만들면 되겠다고 생각했다. 그리고 main() 메소드에서 다음 실행 사례와 같이 2개의 정수와 연산자를 입력받은 후, Add, Sub, Mul, Div 중에서 이 연산을 처리할 수 있는 객체를 생성하고 setValue() 와 calculate()를 호출하여 그 결과 값을 화면에 출력하면 된다고 생각하였다. 철수처럼 프로그램을 작성하라.

두 정수와 연산자를 입력하시오 >> 5 7 +
12
package Jokbo;

import java.util.Scanner;

public class CalcMain {

	public static void main(String[] args) {

		Scanner sc = new Scanner(System.in);
		int result = 0;
		System.out.print("두 정수와 연산자를 입력하세요");
		int a = sc.nextInt();
		int b = sc.nextInt();
		char c = sc.next().charAt(0);
		Calc cal;
		switch (c) {
		case '+':
			cal = new Add();
			break;
		case '-':
			cal = new Sub();
			break;
		case '*':
			cal = new Mul();
			break;
		case '/':
			cal = new Div();
			break;
		default:
			System.out.println("잘못된 연산자입니다");
			sc.close();
			return;
		}
		cal.setValue(a, b);
		result = cal.calculate();
		System.out.println(result);
		sc.close();

	}

}

package Jokbo;

abstract class Calc {
	protected int a;
	protected int b;

	public void setValue(int a, int b) {
		this.a = a;
		this.b = b;
	}

	abstract int calculate();
}

class Add extends Calc {
	public int calculate() {
		return a + b;
	}
}

class Sub extends Calc {
	public int calculate() {
		return a - b;
	}
}

class Mul extends Calc {
	public int calculate() {
		return a * b;
	}
}

class Div extends Calc {
	public int calculate() {
		return a / b;
	}
}
13.연습문제 7-22 번을 푸시오.
package Jokbo;

public class Point {
	int x;
	int y;
	
	Point(){
		this(0,0);
	}
	Point(int x, int y){
		this.x = x;
		this.y = y;
	}
	public String toString() {
		return "["+x+","+y+"]";
	}

}

class Q723 {
	public static double sumArea(Shape[] arr) {
		double sum = 0.0;
		for (int i = 0; i < arr.length; i++) {
			sum += arr[i].calcArea();
		}
		return sum;
	}

	public static void main(String[] args) {
		Shape[] arr = {new Circle(5,0), new Rectangle(3, 4),new Circle(1)};
		System.out.println("면접의 합: " + sumArea(arr));

	}

}

package Jokbo;

abstract class Shape {
	Point p;

	Shape() {
		this(new Point(0, 0));
	}

	Shape(Point P) {
		this.p = p;
	}

	abstract double calcArea();

	Point getPosition() {
		return p;
	}

	void setPosition(Point p) {
		this.p = p;
	}
}

class Circle extends Shape {
	double r;

	Circle(double r) {
		this(new Point(0, 0), r);
	}

	Circle(Point p, double r) {
		super(p);
		this.r = r;
	}

	public Circle(int i, int j) {
		
	}

	@Override
	double calcArea() {
		return Math.PI * r * r;
	}
}

class Rectangle extends Shape {
	double width;
	double height;

	Rectangle(double width, double height) {
		this(new Point(0, 0), width, height);
	}

	Rectangle(Point p, double width, double height) {
		super(p);
		this.width = width;
		this.height = height;
	}

	}
}
14.연습문제 7-23 번을 푸시오.
class Q723 {
	public static double sumArea(Shape[] arr) {
		double sum = 0.0;
		for (int i = 0; i < arr.length; i++) {
			sum += arr[i].calcArea();
		}
		return sum;
	}

	public static void main(String[] args) {
		Shape[] arr = {new Circle(5,0), new Rectangle(3, 4),new Circle(1)};
		System.out.println("면접의 합: " + sumArea(arr));

	}